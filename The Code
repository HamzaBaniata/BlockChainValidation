import datetime
import hashlib
import time
import random


class Block:
    blockNo = 0
    data = None
    next = None
    hash = None
    nonce = 0
    previous_hash = 0x0
    timestamp = datetime.datetime.now()

    def __init__(self, data):
        self.data = random.randint(8 , 240000000000000)

    def hash(self):
        h = hashlib.sha256()
        h.update(
        str(self.nonce).encode('utf-8') +
        str(self.data).encode('utf-8') +
        str(self.previous_hash).encode('utf-8') +
        str(self.timestamp).encode('utf-8') +
        str(self.blockNo).encode('utf-8')
        )
        return h.hexdigest()

    def __str__(self):
        return "\n--------------\n" + "\nBlockNo: " + str(self.blockNo) +  "\nBlock Data: " + str(self.data) + "\nBlock Hash: " + str(self.hash()) +  "\nNumber of Hashes performed to solve the puzzle: " + str(self.nonce)

class Blockchain:

    diff = 5
    maxNonce = 2**32
    target = 2 ** (256-diff)

    block = Block("Genesis")
    dummy = head = block

    def add(self, block):

        block.previous_hash = self.block.hash()
        block.blockNo = self.block.blockNo + 1

        self.block.next = block
        self.block = self.block.next
        
        
    counter = 0
        
        
    def mine(self, block):
        
        for n in range(self.maxNonce):
            if int(block.hash(), 16) <= self.target:
                start_time = time.time()
                if block.data in validChain:
                    elapsed_time = (time.time() - start_time) * 100000
                    print ('Sorry. This element had already been added to the chain, please enter a different element.')
                    print ('elapsed time for validation = ' + str(elapsed_time))
                    validationTimeslist.insert(n, elapsed_time)
                    print ('Number of Blocks Processed so far' + str(self.counter))
                    break
                else:
                    self.add(block)
                    #print(block)
                    validChain.add(block.data)
                    elapsed_time = (time.time() - start_time) * 100000
                   # print('The Blockchain now is updated to have the following transactions:'), print(validChain)
                    #print ('elapsed time for vlidation and addition = ' + str(elapsed_time))
                    validationTimeslist.insert(n, elapsed_time)
                    
                    break
            else:
                block.nonce += 1

blockchain = Blockchain()
Star_time_for_every_thing = time.time()
validChain = set(["0"])
validationTimeslist = ["0"]
totalElapseTime=0
avgValidationTime = 0
for n in range(50000):
    blockchain.mine(Block("Block " + str(n+1)))
    totalElapseTime = float(totalElapseTime) + float(validationTimeslist[n])
    avgValidationTime = float(totalElapseTime/(n+1))
    #print (*validationTimeslist, sep = "\n")
    if n == 49999:
        print ('Average time spent for ' + str(n) + ' blocks validation = ' + str(avgValidationTime))
        end_time_for_every_thing = (time.time() - Star_time_for_every_thing)
        print ('Total time of the experiment = ' + str(end_time_for_every_thing))

#while blockchain.head != None:
   # print(blockchain.head)
  #  blockchain.head = blockchain.head.next
