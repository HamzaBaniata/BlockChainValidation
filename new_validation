import datetime
import hashlib
import time
import random


class Block:
    blockNo = 0
    transactions = list()
    next = None
    hash = None
    nonce = 0
    previous_hash = 0x0
    timestamp = datetime.datetime.now()

    def __init__(self, name):
        self.name = name

    def hash(self):
        h = hashlib.sha256()
        h.update(
            str(self.nonce).encode('utf-8') +
            str(self.transactions).encode('utf-8') +
            str(self.previous_hash).encode('utf-8') +
            str(self.timestamp).encode('utf-8') +
            str(self.blockNo).encode('utf-8')
        )
        return h.hexdigest()

    def add_transaction(self, transaction):
        self.transactions.append(transaction)

    def __str__(self):
        return "\n--------------\n" + "\nBlockNo: " + str(self.blockNo) + "\nBlock Data: " + str(
            self.transactions) + "\nBlock Hash: " + str(
            self.hash()) + "\nNumber of Hashes performed to solve the puzzle: " + str(self.nonce)


class Blockchain:
    diff = 5
    maxNonce = 2 ** 32
    target = 2 ** (256 - diff)
    blocks = [Block("Genesis")]
    validList = set()
    validation_time = 0

    def add(self, block):
        top_block = self.blocks[-1]
        top_block.next = block
        # top_block.transactions = None

        block.previous_hash = top_block.hash()
        block.blockNo = top_block.blockNo + 1

        self.blocks.append(block)

    def mine(self, block):
        while len(block.transactions) != numberOfTransaction:
            tx_data = random.randint(8, 240000000000000)
            start_time = time.time()
            if tx_data in self.validList:
                elapsed_time = time.time() - start_time
                print('Sorry. This element had already been added to the chain, please enter a different element.')
                print('elapsed time for validation = ' + str(elapsed_time))
                self.validation_time = self.validation_time + elapsed_time
            else:
                elapsed_time = time.time() - start_time
                block.add_transaction(tx_data)
                self.validList.add(tx_data)
                self.validation_time = self.validation_time + elapsed_time
        for i in range(self.maxNonce):
            if int(block.hash(), 16) > self.target:
                block.nonce += 1
            else:
                break


blockchain = Blockchain()
numberOfTransaction = 50
numberOfBlocks = 50000
averageValidationTimes = list()

star_time_for_every_thing = time.time()
for n in range(numberOfBlocks):
    blockchain.mine(Block("Block " + str(n + 1)))
    print(str(n) + "th block finished mining")
    print("Validation time: " + str(blockchain.validation_time))

    
avgValidationTime = blockchain.validation_time / (numberOfBlocks * numberOfTransaction)
print ('Average time spent for ' + str(numberOfBlocks) + ' blocks validation = ' + str(avgValidationTime))

end_time_for_every_thing = (time.time() - star_time_for_every_thing)
print ('Total time of the experiment = ' + str(end_time_for_every_thing))

# while blockchain.head != None:
# print(blockchain.head)
#  blockchain.head = blockchain.head.next
